#include <iostream>
#include <vector>
#include <tuple>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <unordered_map>
#include <algorithm>
#include <cmath>
#include "dbg.hpp"
using namespace std;

struct ListNode;
struct TreeNode;
class Solution {
public:
    //8ms 91.98%
    //9.8MB 60.53%
    int longestValidParentheses(string s) {
        
        vector<int> dp(s.length(), 0);
        int ans = 0;
        for (int i = 1; i < s.length(); i++) {
            // cout << i << endl;
            // printVector(dp);
            if (s[i] == ')' && s[i-1] == '(') {
                if (i > 2) {
                    dp[i] = dp[i-2] + 2;
                } 
                else {
                    dp[i] = 2;
                }
            }
            else if (i-1-dp[i-1] >= 0 && s[i-1-dp[i-1]] == '(' && s[i] == ')') {
                if (i-2-dp[i-1] >= 0)
                    dp[i] = dp[i-1] + dp[i-2-dp[i-1]] + 2;
                else
                    dp[i] = dp[i-1] + 2;
            }
            ans = max(ans, dp[i]);
        } 

        // printVector(dp);

        return ans;
    }
};

int main(int argc, char ** argv) {

    // string s = "()(())";
    // string s = "(()))";
    // string s = ")()()()";
    // string s = ")()())";
    // string s = "(()";
    // string s = "(()))))))(()))))))(())))()()()";
    // string s = "((((()))))";
    // string s = "(())()()()";
    string s = "";
    // string s

    cout << s.length() << endl;
    cout << Solution().longestValidParentheses(s) << endl;

    return 0;
}